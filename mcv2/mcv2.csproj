<Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">
  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <OutputType>WinExe</OutputType>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <UseWPF>true</UseWPF>
    <Nullable>enable</Nullable>
    <RunPostBuildEvent>Always</RunPostBuildEvent>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="System.ComponentModel.Composition" Version="5.0.0" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\BigoIF\BigoIF.csproj" />
    <ProjectReference Include="..\BigoSitePlugin\BigoSitePlugin.csproj" />
    <ProjectReference Include="..\BrowserCookieImplementations\BrowserCookieImplementations.csproj" />
    <ProjectReference Include="..\BrowserCookieInterfaces\BrowserCookieInterfaces.csproj" />
    <ProjectReference Include="..\Common\Common.csproj" />
    <ProjectReference Include="..\SitePlugin\SitePlugin.csproj" />
    <ProjectReference Include="..\LineLiveIF\LineLiveIF.csproj" />
    <ProjectReference Include="..\LineLiveSitePlugin\LineLiveSitePlugin.csproj" />
    <ProjectReference Include="..\mcv2Plugin\mcv2Plugin.csproj" />
    <ProjectReference Include="..\MildomIF\MildomIF.csproj" />
    <ProjectReference Include="..\MildomSitePlugin\MildomSitePlugin.csproj" />
    <ProjectReference Include="..\MirrativIF\MirrativIF.csproj" />
    <ProjectReference Include="..\MirrativSitePlugin\MirrativSitePlugin.csproj" />
    <ProjectReference Include="..\NicoLiveIF\NicoLiveIF.csproj" />
    <ProjectReference Include="..\NicoSitePlugin\NicoSitePlugin.csproj" />
    <ProjectReference Include="..\OpenrecIF\OpenrecIF.csproj" />
    <ProjectReference Include="..\OpenrecSitePlugin\OpenrecSitePlugin.csproj" />
    <ProjectReference Include="..\PeriscopeIF\PeriscopeIF.csproj" />
    <ProjectReference Include="..\PeriscopeSitePlugin\PeriscopeSitePlugin.csproj" />
    <ProjectReference Include="..\ShowRoomIF\ShowRoomIF.csproj" />
    <ProjectReference Include="..\ShowRoomSitePlugin\ShowRoomSitePlugin.csproj" />
    <ProjectReference Include="..\SitePluginCommon\SitePluginCommon.csproj" />
    <ProjectReference Include="..\TestSiteIF\TestSiteIF.csproj" />
    <ProjectReference Include="..\TestSitePlugin\TestSitePlugin.csproj" />
    <ProjectReference Include="..\TwicasIF\TwicasIF.csproj" />
    <ProjectReference Include="..\TwicasSitePlugin\TwicasSitePlugin.csproj" />
    <ProjectReference Include="..\TwitchIF\TwitchIF.csproj" />
    <ProjectReference Include="..\TwitchSitePlugin\TwitchSitePlugin.csproj" />
    <ProjectReference Include="..\WhowatchIF\WhowatchIF.csproj" />
    <ProjectReference Include="..\WhowatchSitePlugin\WhowatchSitePlugin.csproj" />
    <ProjectReference Include="..\YouTubeLiveIF\YouTubeLiveIF.csproj" />
    <ProjectReference Include="..\YouTubeLiveSitePlugin\YouTubeLiveSitePlugin.csproj" />
  </ItemGroup>
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <Exec Command=":: 余分なファイルをリリースしてしまわないように一旦全部消す&#xD;&#xA;if $(ConfigurationName) == Release (&#xD;&#xA;  rd /s /q &quot;$(TargetDir)&quot;&#xD;&#xA;) else if $(ConfigurationName) == Beta (&#xD;&#xA;  rd /s /q &quot;$(TargetDir)&quot;&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;:: mcv2.csprojをtouchして常にbuildが走るようにする。&#xD;&#xA;:: こうしないと同ソリューション上にあるプラグインを更新したとしても&#xD;&#xA;:: mcv2本体を更新していなければPost-build eventが走らない&#xD;&#xA;if $(ConfigurationName) == Debug (&#xD;&#xA;    copy &quot;$(ProjectPath)&quot; +&#xD;&#xA;)" />
  </Target>
  <Target Name="PostBuildMacros">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Targets" />
    </GetAssemblyIdentity>
    <ItemGroup>
      <VersionNumber Include="$([System.Text.RegularExpressions.Regex]::Replace(&quot;%(Targets.Version)&quot;, &quot;^([^\.]+)\.([^\.]+)\.([^\.]+)(.*)$&quot;, &quot;$1.$2.$3&quot;))" />
    </ItemGroup>
  </Target>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent" DependsOnTargets="PostBuildMacros">
    <Exec Command=":: mcv2&#xD;&#xA;:: フォルダがごちゃごちゃしていると実行ファイルを見つけにくいからdllディレクトリを作成し、全部突っ込む&#xD;&#xA;if $(ConfigurationName) == Release (&#xD;&#xA;  powershell.exe -ExecutionPolicy Unrestricted -File $(ProjectDir)\postbuild.ps1 -TargetDir $(TargetDir)  -TargetName $(TargetName)&#xD;&#xA;) else if $(ConfigurationName) == Beta (&#xD;&#xA;  powershell.exe -ExecutionPolicy Unrestricted -File $(ProjectDir)\postbuild.ps1 -TargetDir $(TargetDir)  -TargetName $(TargetName)&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;:: ReadMe.txtをコピー&#xD;&#xA;:: xcopy /y &quot;$(ProjectDir)ReadMe.txt&quot; &quot;$(ProjectDir)$(OutDir)&quot;&#xD;&#xA;&#xD;&#xA;:: settingsディレクトリを作成&#xD;&#xA;if not exist &quot;$(TargetDir)settings&quot; mkdir &quot;$(TargetDir)settings&quot;&#xD;&#xA;:: zip化した時に空ディレクトリは無くなってしまうから何かを置いておく必要がある&#xD;&#xA;if not exist &quot;$(TargetDir)settings\placeholder&quot; powershell New-Item &quot;$(TargetDir)settings\placeholder&quot; -ItemType file&#xD;&#xA;&#xD;&#xA;:: MainViewPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(TargetDir)plugins\MainView&quot; mkdir &quot;$(TargetDir)plugins\MainView&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\mcv2MainViewPlugin\$(OutDir)*&quot; &quot;$(TargetDir)plugins\MainView\&quot;&#xD;&#xA;&#xD;&#xA;:: BouyomiPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(TargetDir)plugins\Bouyomi&quot; mkdir &quot;$(TargetDir)plugins\Bouyomi&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\mcv2BouyomiPlugin\$(OutDir)*&quot; &quot;$(TargetDir)plugins\Bouyomi\&quot;&#xD;&#xA;&#xD;&#xA;:: CommentGeneratorPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(TargetDir)plugins\CommentGenerator&quot; mkdir &quot;$(TargetDir)plugins\CommentGenerator&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\CommentGeneratorPlugin\$(OutDir)*&quot; &quot;$(TargetDir)plugins\CommentGenerator\&quot;&#xD;&#xA;&#xD;&#xA;:: YoyakuPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(TargetDir)plugins\Yoyaku&quot; mkdir &quot;$(TargetDir)plugins\Yoyaku&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\mcv2YoyakuPlugin\$(OutDir)*&quot; &quot;$(TargetDir)plugins\Yoyaku\&quot;&#xD;&#xA;&#xD;&#xA;:: PluginInstallerPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(TargetDir)plugins\PluginInstaller&quot; mkdir &quot;$(TargetDir)plugins\PluginInstaller&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\mcv2PluginInstallerPlugin\$(OutDir)*&quot; &quot;$(TargetDir)plugins\PluginInstaller\&quot;&#xD;&#xA;&#xD;&#xA;:: デバッグ時のみTestPluginのファイルを持ってくる&#xD;&#xA;if $(ConfigurationName) == Debug (&#xD;&#xA;  if not exist &quot;$(TargetDir)plugins\Test&quot; mkdir &quot;$(TargetDir)plugins\Test&quot;&#xD;&#xA;  copy &quot;$(SolutionDir)\mcv2TestPlugin\$(OutDir)*&quot; &quot;$(TargetDir)plugins\Test\&quot;&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;:: 自動アップデートに必要なlist.txtを作成&#xD;&#xA;powershell.exe -ExecutionPolicy Unrestricted -File &quot;$(ProjectDir)\updateFileList.ps1&quot; -TargetDir &quot;$(TargetDir)\&quot;&#xD;&#xA;&#xD;&#xA;::zip化&#xD;&#xA;if $(ConfigurationName) == Release (&#xD;&#xA;  powershell compress-archive  -Path  '$(TargetDir)*' -DestinationPath '$(ProjectDir)bin\$(TargetName)_v@(VersionNumber)_stable.zip' -Force&#xD;&#xA;) else if $(ConfigurationName) == Beta (&#xD;&#xA;  powershell compress-archive  -Path  '$(TargetDir)*' -DestinationPath '$(ProjectDir)bin\$(TargetName)_v@(VersionNumber)_beta.zip' -Force&#xD;&#xA;) else if $(ConfigurationName) == Alpha (&#xD;&#xA;  powershell compress-archive  -Path  '$(TargetDir)*' -DestinationPath '$(ProjectDir)bin\$(TargetName)_v@(VersionNumber)_alpha.zip' -Force&#xD;&#xA;)&#xD;&#xA;" />
  </Target>

</Project>