<Window x:Class="mcv2.MainViewPlugin.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:mcv2.MainViewPlugin"
        xmlns:c="clr-namespace:Common;assembly=Common"
        xmlns:w="clr-namespace:Common.Wpf;assembly=Common"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
        
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance local:MainViewModel, IsDesignTimeCreatable=True}"
        d:DesignWidth="1000"
        Title="{Binding Title}" Topmost="{Binding Topmost, Mode=TwoWay}"
        Height="{Binding MainViewHeight, Mode=TwoWay}" Width="{Binding MainViewWidth, Mode=TwoWay}"
        Left="{Binding MainViewLeft, Mode=TwoWay}" Top="{Binding MainViewTop, Mode=TwoWay}"
        >
    <!--<Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Close" Executed="{Binding AppCloseCommand}"/>
    </Window.CommandBindings>-->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <!--<i:InvokeCommandAction Command="{Binding MainViewClosingCommand}" />-->
            <command:EventToCommand Command="{Binding MainViewClosingCommand}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closed">
            <i:InvokeCommandAction Command="{Binding MainViewClosedCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <w:NotConverter x:Key="notConverter" />
        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
        <w:IntToFontSizeConverter x:Key="intToFontConverter" />
        <w:DataGridLengthValueConverter x:Key="dataGridLengthConverter" />
        <w:GridLengthConverter x:Key="gridLengthConverter" />
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="20"/>
            <RowDefinition Height="{Binding ConnectionViewHeight, Mode=TwoWay, Converter={StaticResource gridLengthConverter}}"/>
            <RowDefinition Height="5"/>
            <RowDefinition Height="{Binding MetadataViewHeight, Mode=TwoWay, Converter={StaticResource gridLengthConverter}}"/>
            <RowDefinition Height="5"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="80" />
        </Grid.RowDefinitions>
        <Menu HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="0"
              Background="{Binding MenuBackground}"
              Foreground="{Binding MenuForeground}"
              BorderThickness="1"
              >
            <Menu.Resources>
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="Background" Value="{Binding MenuBackground}" />
                    <Setter Property="Foreground" Value="{Binding MenuForeground}" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Style.Triggers>
                        <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type MenuItem}">
                                        <Border x:Name="templateRoot" SnapsToDevicePixels="true"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}">
                                            <Grid VerticalAlignment="Center">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ContentPresenter x:Name="Icon" ContentSource="Icon" 
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                                          HorizontalAlignment="Center" Width="16" Height="16" Margin="3"/>
                                                <Path x:Name="GlyphPanel" Data="F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z" FlowDirection="LeftToRight" Margin="3"
                                              Visibility="Collapsed" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"/>
                                                <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="true"
                                                          Margin="{TemplateBinding Control.Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                               Placement="Bottom"
                                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                               PlacementTarget="{Binding ElementName=templateRoot}">
                                                    <Border x:Name="SubMenuBorder" 
                                                            Background="{TemplateBinding Control.Background}"
                                                            BorderBrush="{Binding MenuPopupBorderBrush}"
                                                            BorderThickness="1" Padding="2">
                                                        <ScrollViewer x:Name="SubMenuScrollViewer"
                                                             Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                    <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                                                         Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                                                         Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                                                </Canvas>
                                                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="29,2,0,2" Fill="#FFDDDDDD"/>
                                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                        KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true"
                                                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                            </Grid>
                                                        </ScrollViewer>
                                                    </Border>
                                                </Popup>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                            </Trigger>
                                            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                            </Trigger>
                                            <Trigger Property="MenuItem.IsChecked" Value="true">
                                                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                            </Trigger>
                                            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                                <Setter TargetName="templateRoot" Property="Border.Background" Value="{Binding MenuItemMouseOverBackground}" />
                                                <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="#FF26A0DA" />
                                            </Trigger>
                                            <Trigger Property="UIElement.IsEnabled" Value="false">
                                                <Setter TargetName="templateRoot" Value="#FF707070" Property="TextElement.Foreground"/>
                                                <Setter TargetName="GlyphPanel" Value="#FF707070" Property="Shape.Fill"/>
                                            </Trigger>
                                            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                                                Property="Canvas.Top"/>
                                                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                                                Property="Canvas.Left"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="Separator">
                    <Setter Property="Background" Value="{Binding MenuSeparatorBackground}" />
                    <Setter Property="BorderThickness" Value="0" />
                </Style>
            </Menu.Resources>
            <MenuItem Header="ファイル">
                <MenuItem Header="ユーザ一覧" Command="{Binding ShowUserListCommand}" />
                <Separator />
                <MenuItem Header="終了" Command="{Binding ExitCommand}" />
            </MenuItem>
            <!--<MenuItem Header="表示">
                <MenuItem Header="放送情報" IsChecked="{Binding IsShowLiveInfo}" IsCheckable="True" />
            </MenuItem>-->
            <MenuItem Header="設定">
                <MenuItem Header="常に一番手前に表示" IsChecked="{Binding Topmost}" IsCheckable="True" />
                <MenuItem Header="オプション" Command="{Binding ShowOptionsWindowCommand}"/>
                <!--<MenuItem Header="棒読みちゃん" Command="{Binding ShowBouyomiChanSettingsCommand}" />-->
            </MenuItem>
            <MenuItem Header="プラグイン" ItemsSource="{Binding PluginMenuItemCollection}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Path=Name}" />
                        <Setter Property="Command" Value="{Binding Path=ShowSettingViewCommand}" />
                        <Setter Property="ItemsSource" Value="{Binding Path=Children}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="ヘルプ">
                <MenuItem Header="配布サイト" Command="{Binding ShowWebSiteCommand}" />
                <MenuItem Header="作者のTwitter" Command="{Binding ShowDevelopersTwitterCommand}" />
                <Separator />
                <MenuItem Header="アップデートを確認" Command="{Binding CheckUpdateCommand}" />
            </MenuItem>
        </Menu>
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="30" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="5"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Button Content="接続を追加" Command="{Binding AddNewConnectionCommand}" Margin="0,5" Grid.Column="1" />
                <Button Content="選択した接続を削除" Command="{Binding RemoveSelectedConnectionCommand}" Margin="0,5" Grid.Column="3" />
                <Button Content="取得済みコメントを削除" IsEnabled="False" Visibility="Hidden" Command="{Binding ClearAllCommentsCommand}" Margin="0,5" Grid.Column="5" />
            </Grid>
            <ListView Grid.Row="1" ItemsSource="{Binding Connections}" 
                  AllowDrop="True" MinHeight="90"
                      Background="{Binding ConnectionListBackground}"
                      BorderBrush="{Binding ConnectionListBorderBrush}"
                      BorderThickness="1"
                  HorizontalAlignment="Stretch" Margin="5,5,5,5" VerticalAlignment="Stretch">
                <ListView.Resources>
                    <Style TargetType="{x:Type GridViewColumnHeader}">
                        <Setter Property="Background" Value="{Binding ConnectionListHeaderBackground}" />
                        <!--<Setter Property="BorderBrush" Value="Blue" />-->
                        <Setter Property="BorderThickness" Value="100,0,0,0" />
                        <Setter Property="Foreground" Value="{Binding ConnectionListHeaderForeground}" />
                    </Style>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="Background" Value="{Binding DataContext.ConnectionListRowBackground, Source={x:Reference dummyElement}}" />
                    </Style>
                    <!--<Style TargetType="Thumb">
                        <Setter Property="Background" Value="Yellow" />
                    </Style>-->
                </ListView.Resources>
                <ListView.View>
                    <GridView>
                        <GridView.Columns>
                            <GridViewColumn Width="40">
                                <GridViewColumn.Header>
                                    <TextBlock Text="選択" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <CheckBox IsChecked="{Binding IsSelected}" IsEnabled="{Binding CanConnect}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="120">
                                <GridViewColumn.Header>
                                    <TextBlock Text="サイト" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <ComboBox ItemsSource="{Binding Sites}" DisplayMemberPath="DisplayName" IsEnabled="{Binding CanConnect}"
                                              SelectedValue="{Binding SelectedSite}" >
                                        </ComboBox>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="Auto">
                                <GridViewColumn.Header>
                                    <TextBlock Text="名前" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBox Text="{Binding Name, UpdateSourceTrigger=LostFocus}" Width="50" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="220">
                                <GridViewColumn.Header>
                                    <TextBlock Text="URL,放送ID等" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBox Text="{Binding Input, UpdateSourceTrigger=PropertyChanged}" Width="200" IsEnabled="{Binding CanConnect}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="130">
                                <GridViewColumn.Header>
                                    <TextBlock Text="ブラウザ" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <ComboBox ItemsSource="{Binding Browsers}" DisplayMemberPath="DisplayName" IsEnabled="{Binding CanConnect}"
                                              SelectedValue="{Binding SelectedBrowser}"  />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="50">
                                <GridViewColumn.Header>
                                    <TextBlock Text="接続" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="接続" IsEnabled="{Binding CanConnect}" Command="{Binding ConnectCommand}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="50">
                                <GridViewColumn.Header>
                                    <TextBlock Text="切断" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="切断" IsEnabled="{Binding CanDisconnect}" Command="{Binding DisconnectCommand}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="40">
                                <GridViewColumn.Header>
                                    <TextBlock Text="保存" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <CheckBox IsChecked="{Binding NeedSave}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="80">
                                <GridViewColumn.Header>
                                    <TextBlock Text="ログインユーザ名" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding LoggedInUsername}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="{Binding ConnectionColorColumnWidth}">
                                <GridViewColumn.Header>
                                    <TextBlock Text="接続背景色" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <w:ColorPicker SelectedColor="{Binding BackColor}" Margin="5,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="{Binding ConnectionColorColumnWidth}">
                                <GridViewColumn.Header>
                                    <TextBlock Text="接続文字色" />
                                </GridViewColumn.Header>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <w:ColorPicker SelectedColor="{Binding ForeColor}" Margin="5,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView.Columns>
                    </GridView>
                </ListView.View>
            </ListView>
        </Grid>
        <GridSplitter Grid.Row="2" Height="5" HorizontalAlignment="Stretch" ResizeBehavior="PreviousAndNext" ResizeDirection="Rows" />
        <Grid Grid.Row="3">
            <!--Element treeに属さないelementにDataContextを渡すためのdummy element-->
            <FrameworkElement x:Name="dummyElement" Visibility="Collapsed" DataContext="{Binding}"/>
            <DataGrid
                ItemsSource="{Binding MetaCollection, IsAsync=True}"
                Margin="5,0,5,0"
                MinHeight="80"
                AutoGenerateColumns="False"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="{Binding CommentListBackground}"
                BorderBrush="{Binding CommentListBorderBrush}"
                VerticalScrollBarVisibility="Visible"
                HorizontalScrollBarVisibility="Visible"
                >
                <DataGrid.Resources>
                    <ContextMenu x:Key="MetadataDataGridContextMenu" DataContext="{Binding DataContext, Source={x:Reference dummyElement}}">
                        <MenuItem Header="タイトル" IsChecked="{Binding IsShowMetaTitle, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="経過時間" IsChecked="{Binding IsShowMetaElapse, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="視聴者数" IsChecked="{Binding IsShowMetaCurrentViewers, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="総視聴者数" IsChecked="{Binding IsShowMetaTotalViewers, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="アクティブ" IsChecked="{Binding IsShowMetaActive, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="その他" IsChecked="{Binding IsShowMetaOthers, Mode=TwoWay}" IsCheckable="True" />
                    </ContextMenu>
                    <Style TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="ContextMenu" Value="{StaticResource MetadataDataGridContextMenu}" />
                    </Style>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTemplateColumn
                        Header="接続名"
                        DisplayIndex="{Binding DataContext.MetadataViewConnectionNameDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=0}"
                        Width="{Binding DataContext.MetadataViewConnectionNameColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaConnectionName, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ConnectionName}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Header="タイトル"
                        DisplayIndex="{Binding DataContext.MetadataViewTitleDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=1}"
                        Width="{Binding DataContext.MetadataViewTitleColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaTitle, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Title}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Header="経過時間"
                        DisplayIndex="{Binding DataContext.MetadataViewElapsedDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=2}"
                        Width="{Binding DataContext.MetadataViewElapsedColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaElapse, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Elapsed}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Header="視聴者数"
                        DisplayIndex="{Binding DataContext.MetadataViewCurrentViewersDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=3}"
                        Width="{Binding DataContext.MetadataViewCurrentViewersColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaCurrentViewers, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding CurrentViewers}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Header="総視聴者数"
                        DisplayIndex="{Binding DataContext.MetadataViewTotalViewersDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=4}"
                        Width="{Binding DataContext.MetadataViewTotalViewersColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaTotalViewers, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding TotalViewers}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Header="アクティブ"
                        DisplayIndex="{Binding DataContext.MetadataViewActiveDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=5}"
                        Width="{Binding DataContext.MetadataViewActiveColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaActive, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Active}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Header="その他"
                        DisplayIndex="{Binding DataContext.MetadataViewOthersDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=6}"
                        Width="{Binding DataContext.MetadataViewOthersColumnWidth, Mode=OneWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                        Visibility="{Binding DataContext.IsShowMetaOthers, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Others}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <GridSplitter Grid.Row="4" Height="5" HorizontalAlignment="Stretch" ResizeBehavior="PreviousAndNext" ResizeDirection="Rows"  />
        <local:CommentDataGrid IsShowUserInfoMenuItem="True" ForceShowInvisibleComments="False" Margin="5" Grid.Row="5" />
        <Grid Grid.Row="6">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ComboBox ItemsSource="{Binding Connections}" SelectedValue="{Binding SelectedConnection}" DisplayMemberPath="Name" Grid.Column="0" Margin="10" Height="30" />
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Column="2">
                <local:YouTubeCommentPostPanel DataContext="{Binding YouTubeCommentPostPanelViewModel}" Visibility="{Binding IsShowYouTubeCommentPostPanel, Converter={StaticResource booleanToVisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" />
            </Grid>
        </Grid>
    </Grid>
</Window>
